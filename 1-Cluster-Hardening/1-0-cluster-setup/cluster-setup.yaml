#Download visual studio code
# https://code.visualstudio.com/download
# sudo apt insall ./code....deb

# Remove any existing virtual boxes using oracle virtualbox (right click and remove)
# go to Downloads and code repository (certified-kubernetes-security-specialist)
# run vagrant up (to bring 3 nodes up, 1 master node and 2 worker nodes setup)


# Below is kubernetes cluster setup commands 

#1. Update the apt package index and install packages needed to use the Kubernetes apt repository
{
    sudo apt-get update
    sudo apt-get install -y apt-transport-https ca-certificates curl
}

#2. Set up the required kernel modules and make them persistent
{
    cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

    sudo modprobe overlay
    sudo modprobe br_netfilter
}

#3. 
{
    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

    sudo sysctl --system
}

#4. 
sudo apt-get install -y containerd

#5. systemd cgroup configuration
{
    sudo mkdir -p /etc/containerd
    containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' | sudo tee /etc/containerd/config.toml
}

#6. restart
sudo systemctl restart containerd

#7. kubernetes latest version
KUBE_LATEST=$(curl -L -s https://dl.k8s.io/release/stable.txt | awk 'BEGIN { FS="." } { printf "%s.%s", $1, $2 }')

#8. 
{
    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://pkgs.k8s.io/core:/stable:/${KUBE_LATEST}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
}

#9. 
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/${KUBE_LATEST}/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

#10. install kubelet kubeadm and kubectl
{
    sudo apt-get update
    sudo apt-get install -y kubelet kubeadm kubectl
    sudo apt-mark hold kubelet kubeadm kubectl
}

#11. configure crictl
sudo crictl config \
    --set runtime-endpoint=unix:///run/containerd/containerd.sock \
    --set image-endpoint=unix:///run/containerd/containerd.sock

#12 get ip addr
ip addr
PRIMARY_IP=

#13. 
cat <<EOF | sudo tee /etc/default/kubelet
KUBELET_EXTRA_ARGS='--node-ip ${PRIMARY_IP}'
EOF


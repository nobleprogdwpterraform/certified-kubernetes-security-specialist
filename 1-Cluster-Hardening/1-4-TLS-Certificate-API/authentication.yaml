
# Create a private key
openssl genrsa -out john.key 3072

# Change the common name "john" to the actual username that you want to use
openssl req -new -key john.key -out john.csr -subj "/CN=john"

#Encode the CSR document using this command:
cat john.csr | base64 | tr -d "\n"

#Create a CertificateSigningRequest and submit it to a Kubernetes Cluster

cat <<EOF | kubectl create -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: john
spec:
  # This is an encoded CSR. Change this to the base64-encoded contents of john.csr
  request: <ENCODED_CSR>
  signerName: kubernetes.io/kube-apiserver-client
  expirationSeconds: 86400  #one day
  usages:
  - digital signature
  - key encipherment
  - client auth
EOF

#Get the list of CSRs:
kubectl get csr
#Approve the CSR:
kubectl certificate approve john

#Export the issued certificate from the CertificateSigningRequest.
kubectl get csr john -o yaml
kubectl get csr john -o jsonpath='{.status.certificate}'| base64 -d > john.crt

#add this user into the kubeconfig file
kubectl config set-credentials john --client-key=john.key --client-certificate=john.crt --embed-certs=true
# Then, you need to add the context:
kubectl config set-context john --cluster=kubernetes --user=john
#test it:
kubectl --context john auth whoami

#Create Role and RoleBinding 
kubectl create role developer --verb=create --verb=get --verb=list --verb=update --verb=delete --resource=pods
kubectl create rolebinding developer-binding-john --role=developer --user=john

#Verify
kubectl auth can-i create pods --as john
kubectl auth can-i deployments pods --as john

kubectl config use-context john
kubectl get pods
kubectl get deployments
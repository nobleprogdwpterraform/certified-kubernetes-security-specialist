Pod Security Standards(PSS): https://kubernetes.io/docs/concepts/security/pod-security-standards/
Privileged: This policy grants the highest level of access without any restrictions.
Baseline: This policy aims to be highly restrictive to prevent known privilege escalation while still allowing the use of the default Pod configuration with minimal alterations. 
Restricted: This strict policy follows current best practices for hardening Pods. 

Pod Security Admission(PSA) operates in three modes to enforce the controls defined by PSS:
Enforce: When this mode is enabled, the PSA evaluates the Pod against the policy. If the Pod fails to meet the policy requirements, it is rejected.
Audit: In this mode, the Pod is allowed to run even if it violates the policy. However, the violation is recorded in the Kubernetes audit log.
Warn: This mode generates a warning for any policy violation but does not prevent the Pod from running.

1: apply pod security on namespace alpha.
kubectl create ns alpha
kubectl label ns alpha pod-security.kubernetes.io/warn=baseline

2:
cat <<EOF | kubectl create -f -
apiVersion: v1
kind: Pod
metadata:
  name: baseline-pod
  namespace: alpha
spec:
  containers:
  - image: nginx
    name: baseline-pod
    securityContext:
       privileged: true
EOF

# shuold result in warning
3: Multi PSA:
kubectl create ns beta
kubectl label ns beta \
pod-security.kubernetes.io/enforce=baseline \
pod-security.kubernetes.io/warn=restricted	

cat <<EOF | kubectl create -f -
apiVersion: v1
kind: Pod
metadata:
  name: multi-psa
  namespace: beta
spec:
  containers:
  - name: multi-psa
    image: nginx
    securityContext:
      runAsUser: 0
      privileged: true
EOF

#Above will violate the baseline policy by running privileged:true so it will be forbidden to create